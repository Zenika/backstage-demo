{
  "openapi": "3.0.1",
  "info": {
    "title": "Payment API",
    "description": "The Easy Payment API provides methods for managing one-time payments and subscriptions (recurring payments).<br /><br />Payment objects are the main entities that the Easy platform centers around. Whenever a customer initiates either a one-time purchase or a subscription, a new payment object is created. See the [Create payment](#v1-payments-post) method for more details.<br /><br />A payment object is always associated with the following entities:<ul><li>**Merchant** - the webshop that sells products. You provide the merchant identity by using the integration keys associated with your merchant account. Or, if you are a Nets partner and use the keys belonging to a partner account, you can provide an optional `merchantNumber` to identify the merchant.</li><li>**Customer** - a private or a business consumer that places the order. Nets Easy enables customers to collect customer data if the customer's consent is obtained. This data makes future purchases easier. Nets Easy collects customer data directly from the customer. However, it is also possible for you to provide customer data that will initiate consumer information for the payment.</li><li>**Order** - defines what the customer will be charged for. The order is always provided by you when [creating a payment object](#v1-payments-post) and can later be updated during the checkout using the [update order method](#v1-payments-paymentid-orderitems-put).</li></ul><br />A payment object also contains information about the checkout, such as **shipping options**, **payment methods**, and **currencies**.<br /><br />You can track the **status changes** of a payment by using [webhooks](#webhooks). The events that can be subscribed to roughly correspond to the different states you can find in the [payment section in Easy Portal](https://portal.dibspayment.eu/payments). If you are new to Easy, we recommend spending some time in the Easy Portal to familiarize yourself with the platform and what to expect from the API.",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://dev-api.dibspayment.eu"
    }
  ],
  "paths": {
    "/v1/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create payment",
        "description": "Initializes a new payment object that becomes the object used throughout the checkout flow for a particular customer and order. Creating a payment object is the first step when you intend to accept a payment from your customer. Typically you provide the following information:<ul><li>The **order details** including order items, total amount, and currency. </li><li>**Checkout page settings**, which specify what type of integration you want: a checkout page **embedded** on your site or a pre-built checkout page **hosted** by Nets. You can also specify data about your customer so that your customer only needs to provide payment details on the checkout page.</li></ul><br />Optionally, you can also provide information regarding:<ul><li>**Notifications** if you want to be notified through **webhooks** when the status of the payment changes.</li><li>**Fees** added when using **payment methods** such as invoice.</li></ul><br />On success, this method returns a `paymentId` that can be used in subsequent requests to refer to the newly created payment object. Optionally, the response object will also contain a `hostedPaymentPageUrl`, which is the URL you should redirect to if using a hosted pre-built checkout page.",
        "operationId": "Create payment",
        "parameters": [
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedPaymentViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedPaymentViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedPaymentViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/{paymentId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve payment",
        "description": "Retrieves the details of an existing payment. The `paymentId` is obtained from Nets when [creating a payment object](#create-payment).",
        "operationId": "Retrieve payment",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/{paymentId}/referenceinformation": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Update reference information",
        "description": "Updates the specified payment object with a new `reference` string and a `checkoutUrl`. <br /><br />If you instead want to update the **order** of a payment object, use the [Update order](#update-order-items) method.",
        "operationId": "Update reference information",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReferenceInformationBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReferenceInformationBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReferenceInformationBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReferenceInformationBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReferenceInformationBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/{paymentId}/orderitems": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Update order",
        "description": "Updates the order for the specified payment. This endpoint makes it possible to change the order on the checkout page *after* the payment object has been created. This is typically used when managing destination-based shipping costs at the checkout.<br /><br />This endpoint can only be used as long as the checkout has not yet been completed by the customer. (See the [payment.checkout.completed](../api/webhooks#checkout-completed) event.)",
        "operationId": "Update order",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/{paymentId}/myreference": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Updates myReference field on payment",
        "description": "Updates an existing payment with a merchant reference.",
        "operationId": "Update Merchant Reference",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMyReferenceBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMyReferenceBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMyReferenceBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMyReferenceBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMyReferenceBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/{paymentId}/terminate": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Terminate payment",
        "description": "Terminates an ongoing checkout session. A payment can only be terminated **before** the checkout has completed ([see the `payment.checkout` event](#webhooks)). Use this method to prevent a customer from having multiple open payment sessions simultaneously.",
        "operationId": "Terminate payment",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/v1/payments/{paymentId}/cancels": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Cancel payment",
        "description": "Cancels the specified payment. When a payment is canceled, the reserved amount of the payment will be released to the customer's payment card.<br /><br /> Note that:<ul><li>Only full cancels are allowed. The `amount` must always match the total amount of the order.</li><li>Once a payment has been charged (fully or partially), the payment cannot be canceled.</li><li>It is not possible to change the status of a payment once it has been canceled.</li><li>Nets will not charge a fee for a canceled payment.</li></ul>",
        "operationId": "Cancel payment",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/{paymentId}/charges": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Charge payment",
        "description": "Charges the specified payment. Charge a payment on the same day as you ship the matching order.A payment can be fully charged or partially charged:<ul><li>**Full charge**: Your customer will be charged the total amount of the payment. The `amount`  must be specified in the request body and is required to match the total amount of the payment.</li><li>**Partial charge**: Only charge for a subset of the order items. In this case you have to provide the `amount` and the `orderItems` you want to charge in the request body.</li></ul>",
        "operationId": "Charge payment",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "A string that uniquely identifies the charge you are attempting. Must be between 1 and 64 characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChargePaymentBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/ChargePaymentBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargePaymentBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargePaymentBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChargePaymentBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentChargedViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentChargedViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentChargedViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charges/{chargeId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve charge",
        "description": "Retrieves the details of an existing charge operation. The `chargeId` is obtained from Nets when [creating a new charge](##v1-payments-paymentid-charges-post). The primary usage of this method is to retrieve invoice details of a charge.",
        "operationId": "Retrieve charge",
        "parameters": [
          {
            "name": "chargeId",
            "in": "path",
            "description": "The identifier of the existing charge (a UUID).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charges/{chargeId}/refunds": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refund charge",
        "description": "Refunds a previously settled transaction (a charged payment). The refunded amount will be transferred back to the customer's account. The required `chargeId` is returned from the [Charge payment method](#charge-payment)<br /><br />A settled transaction can be fully or partially refunded:<ul><li>Full refund requires only the `amount` to be specified in the request body.</li><li>Partial refund requires the `amount` and the `orderItems` to be refunded.</li></ul>",
        "operationId": "Refund charge",
        "parameters": [
          {
            "name": "chargeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "A string that uniquely identifies the refund you are attempting. Must be between 1 and 64 characters.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/{paymentId}/refunds": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refund payment",
        "description": "Refunds a previously settled payment. The refunded amount will be transferred back to the customer's account.<br /><br />A settled payment can be fully or partially refunded, this end-point is not supported for these payment methods:<ul><li>Arvato</li><li>PayPal</li><li>RatePayInvoice</li><li>RatePaySepa</li><li>RatePayInstallment</li><li>EasyInvoice</li><li>EasyCampaign</li><li>EasyInstallment</li></ul>",
        "operationId": "Refund payment",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "A string that uniquely identifies the refund you are attempting. Must be between 1 and 64 characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommercePlatformTag",
            "in": "header",
            "description": "An identifier of the ecommerce platform.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/refunds/{refundId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve refund",
        "description": "Retrieves the details of an existing refund. The `refundId` is obtained from Nets when [creating a new refund](#v1-charges-chargeid-refunds-post). The primary usage of this method is to retrieve invoice details of a refund.",
        "operationId": "Retrieve refund",
        "parameters": [
          {
            "name": "refundId",
            "in": "path",
            "description": "The identifier of the existing refund (a UUID).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RefundDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pending-refunds/{refundId}/cancel": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Cancel pending refund",
        "description": "Cancels a pending refund. A refund can be in a pending state when there are not enough funds in the merchant's account to make the refund.<br /><br />The `refundId` is returned when [creating a new refund](#create-refund).",
        "operationId": "Cancel pending refund",
        "parameters": [
          {
            "name": "refundId",
            "in": "path",
            "description": "The identifier of the pending refund (a UUID).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve subscription",
        "description": "Retrieves an existing subscription by a `subscriptionId`. The `subscriptionId` can be obtained from the [Retrieve payment](#get-payment) method.",
        "operationId": "Retrieve subscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The subscription identifier (a UUID).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "MerchantNumber",
            "in": "header",
            "description": "The merchant number. Use this header only if you are a Nets partner and initiating the checkout with your partner keys. If you are using the integration keys for your webshop, there is no need to specify this header.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve subscription by external reference",
        "description": "Retrieves a subscription matching the specified `externalReference`. This method can only be used for retrieving subscriptions that have been imported from a payment platform other than Nets Easy. Subscriptions created within Nets Easy do not have an `externalReference` value set.",
        "operationId": "Retrieve subscription by external reference",
        "parameters": [
          {
            "name": "externalReference",
            "in": "query",
            "description": "The external reference to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MerchantNumber",
            "in": "header",
            "description": "The merchant number. Use this header only if you are a Nets partner and initiating the checkout with your partner keys. If you are using the integration keys for your webshop, there is no need to specify this header.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/charges": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Bulk charge subscriptions",
        "description": "Charges multiple subscriptions at once. The request body must contain:<ul><li>A unique string that identifies this bulk charge operation</li><li>A set of subscription identifiers that should be charged.</li></ul><br />To get status updates about the bulk charge you can subscribe to the webhooks for charges and refunds (`payment.charges.*` and `payments.refunds.*`). See also the [webhooks documentation](#webhooks).",
        "operationId": "Bulk charge subscriptions",
        "parameters": [
          {
            "name": "MerchantNumber",
            "in": "header",
            "description": "The merchant number. Use this header only if you are a Nets partner and initiating the checkout with your partner keys. If you are using the integration keys for your webshop, there is no need to specify this header.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeSubscriptionsBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeSubscriptionsBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeSubscriptionsBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeSubscriptionsBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeSubscriptionsBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkChargeSubscriptionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkChargeSubscriptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkChargeSubscriptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/charges/{bulkId}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve bulk charges",
        "description": "Retrieves charges associated with the specified bulk charge operation. The `bulkId` is returned from Nets in the response of the [Bulk charge subscriptions](#v1-subscription-charges-post) method.<br /><br />This method supports pagination. Specify the range of subscriptions to retrieve by using either `skip` and `take` or `pageNumber` together with `pageSize`. The boolean property named `more` in the response body, indicates whether there are more subscriptions beyond the requested range.",
        "operationId": "Retrieve bulk charges",
        "parameters": [
          {
            "name": "bulkId",
            "in": "path",
            "description": "The identifier of the bulk charge operation that was returned from the [Bulk charge subscriptions](#v1-subscriptions-charges-post) method.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of subscription entries to skip from the start. Use this property in combination with the `take` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of subscriptions to be retrieved. Use this property in combination with the `skip` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to be retrieved. Use this property in combination with the `pageSize` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page when specify the range of subscriptions using the `pageNumber` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MerchantNumber",
            "in": "header",
            "description": "The merchant number. Use this header only if you are a Nets partner and initiating the checkout with your partner keys. If you are using the integration keys for your webshop, there is no need to specify this header.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkChargeViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkChargeViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkChargeViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/verifications": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Verify subscriptions",
        "description": "Verifies the specified set of subscriptions in bulk. The `bulkId` returned from a successful request can be used for querying the status of the subscriptions.",
        "operationId": "Bulk verification subscriptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubscriptionVerificationBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubscriptionVerificationBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubscriptionVerificationBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubscriptionVerificationBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubscriptionVerificationBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSubscriptionVerificationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSubscriptionVerificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSubscriptionVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/verifications/{bulkId}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve bulk verifications",
        "description": "Retrieves verifications associated with the specified bulk verification operation. The `bulkId` is returned from Nets in the response of the [Verify subscriptions](#v1-subscriptions-verifications-post) method.<br /><br />This method supports pagination. Specify the range of subscriptions to retrieve by using either `skip` and `take` or `pageNumber` together with `pageSize`. The boolean property named `more` in the response body, indicates whether there are more subscriptions beyond the requested range.",
        "operationId": "Retrieve bulk verifications",
        "parameters": [
          {
            "name": "bulkId",
            "in": "path",
            "description": "The identifier of the bulk verification operation that was returned from the [erfiy subscriptions](#v1-subscriptions-verifications-post) method.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of subscription entries to skip from the start. Use this property in combination with the `take` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of subscriptions to be retrieved. Use this property in combination with the `skip` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to be retrieved. Use this property in combination with the `pageSize` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page when specify the range of subscriptions using the `pageNumber` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkVerificationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkVerificationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkVerificationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/unscheduledsubscriptions/{unscheduledSubscriptionId}": {
      "get": {
        "tags": [
          "UnscheduledSubscriptions"
        ],
        "summary": "Retrieve unscheduled subscription",
        "description": "Retrieves an existing unscheduled subscription by a `unscheduledSubscriptionId`. The `unscheduledSubscriptionId` can be obtained from the [Retrieve payment](#get-payment) method.",
        "operationId": "Retrieve unscheduled subscription",
        "parameters": [
          {
            "name": "unscheduledSubscriptionId",
            "in": "path",
            "description": "The unscheduled subscription identifier (a UUID).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnscheduledSubscriptionViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnscheduledSubscriptionViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnscheduledSubscriptionViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/unscheduledsubscriptions": {
      "get": {
        "tags": [
          "UnscheduledSubscriptions"
        ],
        "summary": "Retrieve unscheduled subscription by external reference",
        "description": "Retrieves an unscheduled subscription matching the specified `externalReference`. This method can only be used for retrieving unscheduled subscriptions that have been imported from a payment platform other than Nets Easy. Unscheduled subscriptions created within Nets Easy do not have an `externalReference` value set.",
        "operationId": "Retrieve unscheduled subscription by external reference",
        "parameters": [
          {
            "name": "externalReference",
            "in": "query",
            "description": "The external reference to search for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnscheduledSubscriptionViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnscheduledSubscriptionViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnscheduledSubscriptionViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/unscheduledsubscriptions/{unscheduledSubscriptionId}/charges": {
      "post": {
        "tags": [
          "UnscheduledSubscriptions"
        ],
        "summary": "Charge unscheduled subscription",
        "description": "Charges a single unscheduled subscription. The `unscheduledSubscriptionId` can be obtained from the [Retrieve payment](#get-payment) method. On success, this method creates a new payment object and performs a charge of the specified amount. Both the new `paymentId` and `chargeId` are returned in the response body.",
        "operationId": "Charge unscheduled subscription",
        "parameters": [
          {
            "name": "unscheduledSubscriptionId",
            "in": "path",
            "description": "The unscheduled subscription identifier (a UUID) returned from the [Retrieve payment](#v1-payments-paymentId-get) method.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeUnscheduledSubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Client Error"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/unscheduledsubscriptions/charges": {
      "post": {
        "tags": [
          "UnscheduledSubscriptions"
        ],
        "summary": "Bulk charge unscheduled subscriptions",
        "description": "Charges multiple unscheduled subscriptions at once. The request body must contain:<ul><li>A unique string that identifies this bulk charge operation</li><li>A set of unscheduled subscription identifiers that should be charged.</li></ul><br />To get status updates about the bulk charge you can subscribe to the webhooks for charges and refunds (`payment.charges.*` and `payments.refunds.*`). See also the [webhooks documentation](#webhooks).",
        "operationId": "Bulk charge unscheduled subscriptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/unscheduledsubscriptions/charges/{bulkId}": {
      "get": {
        "tags": [
          "UnscheduledSubscriptions"
        ],
        "summary": "Retrieve bulk unscheduled charges",
        "description": "Retrieves charges associated with the specified bulk charge operation. The `bulkId` is returned from Nets in the response of the [Bulk charge unscheduled subscriptions](#v1-unscheduled-subscription-charges-post) method.<br /><br />This method supports pagination. Specify the range of subscriptions to retrieve by using either `skip` and `take` or `pageNumber` together with `pageSize`. The boolean property named `more` in the response body, indicates whether there are more subscriptions beyond the requested range.",
        "operationId": "Retrieve bulk unscheduled subscription charges",
        "parameters": [
          {
            "name": "bulkId",
            "in": "path",
            "description": "The identifier of the bulk charge operation that was returned from the [Bulk charge unscheduled subscriptions](#v1-unscheduled-subscriptions-charges-post) method.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of subscription entries to skip from the start. Use this property in combination with the `take` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of subscriptions to be retrieved. Use this property in combination with the `skip` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to be retrieved. Use this property in combination with the `pageSize` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page when specify the range of subscriptions using the `pageNumber` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkChargeUnscheduledSubscriptionViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkChargeUnscheduledSubscriptionViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkChargeUnscheduledSubscriptionViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/unscheduledsubscriptions/verifications": {
      "post": {
        "tags": [
          "UnscheduledSubscriptions"
        ],
        "summary": "Verify cards for unscheduled subscriptions",
        "description": "Verifies the specified set of unscheduled subscriptions in bulk. The `bulkId` returned from a successful request can be used for querying the status of the unscheduled subscriptions.",
        "operationId": "Bulk verification for unscheduled subscriptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationBody"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnscheduledSubscriptionVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/unscheduledsubscriptions/verifications/{bulkId}": {
      "get": {
        "tags": [
          "UnscheduledSubscriptions"
        ],
        "summary": "Retrieve bulk verifications for unscheduled subscriptions",
        "description": "Retrieves verifications associated with the specified bulk unscheduled verification operation. The `bulkId` is returned from Nets in the response of the [Verify unscheduled subscriptions](#v1-unscheduledsubscriptions-verifications-post) method.<br /><br />This method supports pagination. Specify the range of subscriptions to retrieve by using either `skip` and `take` or `pageNumber` together with `pageSize`. The boolean property named `more` in the response body, indicates whether there are more subscriptions beyond the requested range.",
        "operationId": "Retrieve bulk unscheduled subscription card verifications",
        "parameters": [
          {
            "name": "bulkId",
            "in": "path",
            "description": "The identifier of the bulk verification operation that was returned from the [Verify unscheduled subscriptions](#v1-unscheduledsubscriptions-verifications-post) method.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of unscheduled subscription entries to skip from the start. Use this property in combination with the `take` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of unscheduled subscriptions to be retrieved. Use this property in combination with the `skip` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to be retrieved. Use this property in combination with the `pageSize` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page when specify the range of unscheduled subscriptions using the `pageNumber` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkVerificationUnscheduledSubscriptionViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkVerificationUnscheduledSubscriptionViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultViewModel_BulkVerificationUnscheduledSubscriptionViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestViewModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The primary address line.",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "description": "An additional address line.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "A three-letter country code (ISO 3166-1), for example GBR. See also the [list of supported languages](../api-overview).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The address of a customer (private or business)."
      },
      "AddressDetails": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The primary address line.",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "description": "An additional address line.",
            "nullable": true
          },
          "receiverLine": {
            "type": "string",
            "description": "The name (or company name) of the customer.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "A three-letter country code (ISO 3166-1), for example GBR. See also the [list of supported languages](../api-overview).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BadRequestViewModel": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "An array of error messages.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Returned from the API when the request from the client could not be understood by the server. The object contains error messages for debugging purposes and are not meant to be presented to an end user."
      },
      "BulkChargeSubscriptionsBody": {
        "type": "object",
        "properties": {
          "externalBulkChargeId": {
            "type": "string",
            "description": "A string that uniquely identifies the bulk charge operation. Use this property for enabling safe retries. Must be between 1 and 64 characters.",
            "nullable": true
          },
          "notifications": {
            "$ref": "#/components/schemas/Notification"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeBulkEntry"
            },
            "description": "The array of subscriptions that should be charged. Each item in the array should define either a `subscriptionId` or an `externalReference`, but not both.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkChargeSubscriptionsResponse": {
        "required": [
          "bulkId"
        ],
        "type": "object",
        "properties": {
          "bulkId": {
            "type": "string",
            "description": "The bulk charge identifier (a UUID). This identifier can be used when [retrieving all charges associated with a bulk charge operation](#v1-subscriptions-charges-bulkid-get).",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "BulkChargeUnscheduledSubscriptionViewModel": {
        "required": [
          "status",
          "unscheduledSubscriptionId"
        ],
        "type": "object",
        "properties": {
          "unscheduledSubscriptionId": {
            "type": "string",
            "description": "The unscheduled subscription identifier (a UUID) returned from the Retrieve bulk unscheduled subscription charges method.",
            "format": "uuid"
          },
          "paymentId": {
            "type": "string",
            "description": "The payment identifier.",
            "format": "uuid",
            "nullable": true
          },
          "chargeId": {
            "type": "string",
            "description": "The charge identifier (a UUID) returned from the Charge payment method.",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The current processing status of the subscription. Possible values are: 'Pending', 'Succeeded', and 'Failed'.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported subscriptions. This parameter is only used if your unscheduled subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkChargeUnscheduledSubscriptionsBody": {
        "type": "object",
        "properties": {
          "externalBulkChargeId": {
            "type": "string",
            "description": "A string that uniquely identifies the bulk charge operation. Use this property for enabling safe retries. Must be between 1 and 64 characters.",
            "nullable": true
          },
          "notifications": {
            "$ref": "#/components/schemas/Notification"
          },
          "unscheduledSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeBulkUnscheduledEntry"
            },
            "description": "The array of unscheduled subscriptions that should be charged. Each item in the array should define either a `subscriptionId` or an `externalReference`, but not both.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkChargeUnscheduledSubscriptionsResponse": {
        "required": [
          "bulkId"
        ],
        "type": "object",
        "properties": {
          "bulkId": {
            "type": "string",
            "description": "The bulk charge identifier (a UUID). This identifier can be used when [retrieving all charges associated with a bulk charge operation](#v1-unscheduled-subscriptions-charges-bulkid-get).",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "BulkChargeViewModel": {
        "required": [
          "status",
          "subscriptionId"
        ],
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "The subscription identifier (a UUID) returned from the [Retrieve payment](#v1-payments-paymentid-get) method.",
            "format": "uuid"
          },
          "paymentId": {
            "type": "string",
            "description": "The payment identifier.",
            "format": "uuid",
            "nullable": true
          },
          "chargeId": {
            "type": "string",
            "description": "The charge identifier (a UUID) returned from the [Charge payment](#charge-payment) method.",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The current processing status of the subscription. Possible values are: 'Pending', 'Succeeded', and 'Failed'.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported subscriptions. This parameter is only used if your subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkEntry": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "The identifier of the subscription (a UUID). The `subscriptionId` can be obtained using the [Retrieve payment](#v1-payments-paymentid-get) method.",
            "format": "uuid",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported subscriptions. This parameter is only used if your subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkSubscriptionVerificationBody": {
        "type": "object",
        "properties": {
          "externalBulkVerificationId": {
            "type": "string",
            "description": "A string that uniquely identifies the verification operation. Use this property for enabling safe retries. Must be between 1 and 64 characters.",
            "nullable": true
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkEntry"
            },
            "description": "The set of subscriptions that should be verified. Each item in the array should define either a `subscriptioId` or an `externalReference`, but not both.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkSubscriptionVerificationResponse": {
        "required": [
          "bulkId"
        ],
        "type": "object",
        "properties": {
          "bulkId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "BulkUnscheduledSubscriptionEntry": {
        "type": "object",
        "properties": {
          "unscheduledSubscriptionId": {
            "type": "string",
            "description": "The identifier of the unscheduled subscription (a UUID). The `unscheduledSubscriptionId` can be obtained using the [Retrieve payment](#v1-payments-paymentid-get) method.",
            "format": "uuid",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported subscriptions. This parameter is only used if your subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkUnscheduledSubscriptionVerificationBody": {
        "type": "object",
        "properties": {
          "externalBulkVerificationId": {
            "type": "string",
            "description": "A string that uniquely identifies the verification operation. Use this property for enabling safe retries. Must be between 1 and 64 characters.",
            "nullable": true
          },
          "unscheduledSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUnscheduledSubscriptionEntry"
            },
            "description": "The set of unscheduled subscriptions that should be verified. Each item in the array should define either a `unscheduledSubscriptionId` or an `externalReference`, but not both.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkUnscheduledSubscriptionVerificationResponse": {
        "required": [
          "bulkId"
        ],
        "type": "object",
        "properties": {
          "bulkId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "BulkVerificationUnscheduledSubscriptionViewModel": {
        "required": [
          "status",
          "unscheduledSubscriptionId"
        ],
        "type": "object",
        "properties": {
          "unscheduledSubscriptionId": {
            "type": "string",
            "description": "The identifier of the unscheduled subscription (a UUID).",
            "format": "uuid"
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported unscheduled subscriptions. This parameter is only used if your unscheduled subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The current processing status of the unscheduled subscription. Possible values are: 'Pending', 'Succeeded', and 'Failed'.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "paymentId": {
            "type": "string",
            "description": "The payment identifier (a UUID).",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkVerificationViewModel": {
        "required": [
          "status",
          "subscriptionId"
        ],
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "The identifier of the subscription (a UUID).",
            "format": "uuid"
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported subscriptions. This parameter is only used if your subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The current processing status of the subscription. Possible values are: 'Pending', 'Succeeded', and 'Failed'.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "paymentId": {
            "type": "string",
            "description": "The payment identifier (a UUID).",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelPaymentBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount to be canceled.",
            "format": "int32"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "The order items to be canceled. <br /><br /> Note! Since only full cancels are currently supported, you need to provide all order items or completely avoid specifying any order items.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardDetails": {
        "type": "object",
        "properties": {
          "maskedPan": {
            "type": "string",
            "description": "A masked version of the PAN (Primary Account Number). At maximum, only the first six and last four digits of the account number are displayed.",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "The four-digit expiration date of the payment card. The format should be: YYMM.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Charge": {
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "string",
            "description": "A unique identifier of the charge.",
            "format": "uuid"
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of this charge.",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The date and time when the charge was initiated.",
            "format": "date-time"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "The array of order items associated with the charge.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains information about a partial or full charge. A charge is always associated with one or multiple order items."
      },
      "ChargeBulkEntry": {
        "required": [
          "order"
        ],
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "The subscription identifier (a UUID) returned from the [Retrieve payment](#v1-payments-paymentId-get) method.",
            "format": "uuid",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported subscriptions. This parameter is only used if your subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "additionalProperties": false
      },
      "ChargeBulkUnscheduledEntry": {
        "required": [
          "order"
        ],
        "type": "object",
        "properties": {
          "unscheduledSubscriptionId": {
            "type": "string",
            "description": "The subscription identifier (a UUID) returned from the [Retrieve payment](#v1-payments-paymentId-get) method.",
            "format": "uuid",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "An external reference to identify a set of imported subscriptions. This parameter is only used if your subscriptions have been imported from a payment platform other than Nets Easy.",
            "nullable": true
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "additionalProperties": false
      },
      "ChargePaymentBody": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount to be charged.",
            "format": "int32"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "The order items list to charge for. Only required for partial charges.",
            "nullable": true
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingInformation"
          },
          "finalCharge": {
            "type": "boolean",
            "description": "Flag to release remaining reservation",
            "nullable": true
          },
          "myReference": {
            "type": "string",
            "description": "Merchant payment reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChargeResponse": {
        "required": [
          "amount",
          "chargeId"
        ],
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "string",
            "description": "The charge identifier (a UUID).",
            "format": "uuid"
          },
          "amount": {
            "type": "integer",
            "description": "The [amount](../api#currency-and-amount), for example 10000.",
            "format": "int32"
          },
          "invoiceDetails": {
            "$ref": "#/components/schemas/InvoiceDetails"
          }
        },
        "additionalProperties": false
      },
      "ChargeUnscheduledSubscriptionBody": {
        "required": [
          "order"
        ],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "notifications": {
            "$ref": "#/components/schemas/Notification"
          }
        },
        "additionalProperties": false,
        "description": "The request body of a charge unscheduled subscription request."
      },
      "ChargeUnscheduledSubscriptionResponse": {
        "required": [
          "chargeId",
          "paymentId"
        ],
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "The payment identifier of the new payment object created when charging for the unscheduled subscription.",
            "format": "uuid"
          },
          "chargeId": {
            "type": "string",
            "description": "A unique identifier of the charge.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "The response after a successful charge of an unscheduled subscription."
      },
      "CheckoutAppearance": {
        "type": "object",
        "properties": {
          "displayOptions": {
            "$ref": "#/components/schemas/DisplayOptions"
          },
          "textOptions": {
            "$ref": "#/components/schemas/TextOptions"
          }
        },
        "additionalProperties": false,
        "description": "Defines the appearance of the checkout page."
      },
      "CheckoutDetails": {
        "required": [
          "termsUrl"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Specifies where the checkout will be loaded if using an embedded checkout page. See also the `integrationType` property.",
            "nullable": true
          },
          "integrationType": {
            "type": "string",
            "description": "Determines whether the checkout should be embedded in your webshop or if the checkout should be hosted by Nets on a separate page. Valid values are: `'EmbeddedCheckout'` (default) or `'HostedPaymentPage'`. Please note that the string values are **case sensitive**.<ul><li>If set to `'HostedPaymentPage'`, your website should redirect the customer to the `hostedPaymentPageUrl` provided in the response body. Using a hosted checkout page requires that you specify the `returnUrl` property.</li><li>If set to `'EmbeddedCheckout'`, the checkout page will be embedded within an iframe on your website using the [Checkout JS SDK](../api/checkout-js-sdk). Using an embedded checkout page requires that you also specify the `url` property.</li></ul>",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "description": "Specifies where your customer will return after a completed payment when using a hosted checkout page. See also the `integrationType` property.",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "description": "Specifies where your customer will return after a canceled payment when using a hosted checkout page. See also the `integrationType` property.",
            "nullable": true
          },
          "consumer": {
            "$ref": "#/components/schemas/Consumer"
          },
          "termsUrl": {
            "type": "string",
            "description": "The URL to the terms and conditions of your webshop.",
            "nullable": true
          },
          "merchantTermsUrl": {
            "type": "string",
            "description": "The URL to the privacy and cookie settings of your webshop.",
            "nullable": true
          },
          "shippingCountries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCountry"
            },
            "description": "An array of countries that limits the set of countries available for shipping. If left unspecified, [all countries supported by Easy Checkout](../api#country-codes-and-phone-prefixes) will be available for shipping on the checkout page.",
            "nullable": true
          },
          "shipping": {
            "$ref": "#/components/schemas/Shipping"
          },
          "consumerType": {
            "$ref": "#/components/schemas/ConsumerTypeOptions"
          },
          "charge": {
            "type": "boolean",
            "description": "If set to `true`, the transaction will be charged automatically after the reservation has been accepted. Default value is `false` if not specified."
          },
          "publicDevice": {
            "type": "boolean",
            "description": "If set to `true`, the checkout will not load any user data, and also the checkout will not remember the current consumer on this device. Default value is `false` if not specified."
          },
          "merchantHandlesConsumerData": {
            "type": "boolean",
            "description": "Allows you to initiate the checkout with customer data so that your customer only need to provide payment details. If set to `true`, you also need to specify a `consumer` object (either a `privatePerson` or a `company`, not both)."
          },
          "appearance": {
            "$ref": "#/components/schemas/CheckoutAppearance"
          },
          "countryCode": {
            "type": "string",
            "description": "Merchant's three-letter checkout country code (ISO 3166-1), for example GBR. See also the [list of supported languages](../api-overview).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the behavior and style of the checkout page."
      },
      "CheckoutParameters": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to the hosted or embedded checkout page.",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "description": "The URL to the page responsible for handling a canceled checkout.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Company": {
        "type": "object",
        "properties": {
          "merchantReference": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The company name.",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "contactDetails": {
            "$ref": "#/components/schemas/CompanyContactDetails"
          }
        },
        "additionalProperties": false
      },
      "CompanyConsumer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the company.",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "additionalProperties": false,
        "description": "A business consumer."
      },
      "CompanyContactDetails": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name (also known as given name).",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name (also known as surname/family name).",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email address.",
            "nullable": true
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        },
        "additionalProperties": false,
        "description": "Information about the contact person for a company."
      },
      "Consumer": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email address.",
            "nullable": true
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "privatePerson": {
            "$ref": "#/components/schemas/Person"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyConsumer"
          }
        },
        "additionalProperties": false,
        "description": "Contains information about the customer. If provided, this information will be used for initating the consumer data of the payment object. See also the property `merchantHandlesConsumerData` which controls what fields to show on the checkout page."
      },
      "ConsumerDetails": {
        "type": "object",
        "properties": {
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressDetails"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "privatePerson": {
            "$ref": "#/components/schemas/PrivatePerson"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressDetails"
          }
        },
        "additionalProperties": false
      },
      "ConsumerTypeOptions": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "description": "The checkout form defaults to this consumer type when first loaded.",
            "nullable": true
          },
          "supportedTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The array of consumer types that should be supported on the checkout page. Allowed values are: 'B2B' and 'B2C'.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configures which consumer types should be accepted. Defaults to 'B2C'.<br /><br />These options are ignore if the property `merchantHandlesConsumerData` is set to `true`."
      },
      "CreatePaymentBody": {
        "required": [
          "checkout",
          "order"
        ],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "checkout": {
            "$ref": "#/components/schemas/CheckoutDetails"
          },
          "merchantNumber": {
            "type": "string",
            "description": "The merchant number. Use this header only if you are a Nets partner and initiating the checkout with your partner keys. If you are using the integration keys for your webshop, there is no need to specify this header.",
            "nullable": true
          },
          "notifications": {
            "$ref": "#/components/schemas/Notification"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionDetails"
          },
          "unscheduledSubscription": {
            "$ref": "#/components/schemas/UnscheduledSubscriptionDetails"
          },
          "paymentMethodsConfiguration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodConfiguration"
            },
            "description": "Specifies payment methods configuration to be used for this payment, ignored if empty or null.",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodDetails"
            },
            "nullable": true
          },
          "myReference": {
            "type": "string",
            "description": "Merchant payment reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatedPaymentViewModel": {
        "required": [
          "paymentId"
        ],
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "The identifier (UUID) of the newly created payment object. Use this identifier in subsequent request when referring to the new payment.",
            "nullable": true
          },
          "hostedPaymentPageUrl": {
            "type": "string",
            "description": "The URL your website should redirect to if using a hosted pre-built checkout page.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisplayOptions": {
        "type": "object",
        "properties": {
          "showMerchantName": {
            "type": "boolean",
            "description": "If set to `true`, displays the merchant name above the checkout. Default value is `true` when using a `HostedPaymentPage`.",
            "nullable": true
          },
          "showOrderSummary": {
            "type": "boolean",
            "description": "If set to `true`, displays the order summary above the checkout. Default value is `true` when using a `HostedPaymentPage`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Controls what is displayed on the checkout page."
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "An internal error message. This message is not meant to be presented to the customer. Instead, this message can be logged and used for debugging purposes.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A numeric error code to be used for debugging purposes.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the error, for example: 'internal'.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains information about an error (client error or server error)."
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "invoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "ocr": {
            "type": "string",
            "description": "A reference number.",
            "nullable": true
          },
          "pdfLink": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceDetails": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "The URL of an invoice that is publicly accessible.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an publicly accessible invoice."
      },
      "Notification": {
        "type": "object",
        "properties": {
          "webHooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            },
            "description": "The list of webhooks. The maximum number of webhooks is 32.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Notifications allow you to subscribe to status updates for a payment."
      },
      "Order": {
        "required": [
          "amount",
          "currency",
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "A list of order items. At least one item must be specified.",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order including VAT, if any. (Sum of all `grossTotalAmount`s in the order.)",
            "format": "int32",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The [currency](../api#currency-and-amount) of the payment, for example 'SEK'.",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "A reference to recognize this order. Usually a number sequence (order number).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specifies an order associated with a payment. An order must contain at least one order item. The `amount` of the order must match the sum of the specified order items."
      },
      "OrderDetails": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The total [amount](../api#currency-and-amount) of the order, for example 10000.",
            "format": "int32"
          },
          "currency": {
            "type": "string",
            "description": "The [currency](../api#currency-and-amount) of the payment, for example 'SEK'.",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "The reference to recognize this order. Usually a number sequence provided when [creating](#v1-payments-create-payment-post) or [updating](#v1-update-order-put) the payment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderItem": {
        "required": [
          "grossTotalAmount",
          "name",
          "netTotalAmount",
          "quantity",
          "reference",
          "unit",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "A reference to recognize the product, usually the SKU (stock keeping unit) of the product. For convenience in the case of refunds or modifications of placed orders, the reference should be unique for each variation of a product item (size, color, etc).",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product.",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "description": "The defined unit of measurement for the product, for example pcs, liters, or kg.",
            "nullable": true
          },
          "unitPrice": {
            "type": "integer",
            "description": "The price per unit excluding VAT.",
            "format": "int32"
          },
          "taxRate": {
            "type": "integer",
            "description": "The tax/VAT rate (in percentage times 100). For examlpe, the value `2500` corresponds to 25%. Defaults to 0 if not provided.",
            "format": "int32"
          },
          "taxAmount": {
            "type": "integer",
            "description": "The tax/VAT amount (`unitPrice` * `quantity` * `taxRate` / 10000). Defaults to 0 if not provided. `taxAmount` should include the total tax amount for the entire order item.",
            "format": "int32"
          },
          "grossTotalAmount": {
            "type": "integer",
            "description": "The total amount including VAT (`netTotalAmount` + `taxAmount`).",
            "format": "int32"
          },
          "netTotalAmount": {
            "type": "integer",
            "description": "The total amount excluding VAT (`unitPrice` * `quantity`).",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a line of a customer order. An order item refers to a product that the customer has bought. A product can be anything from a physical product to an online subscription or shipping."
      },
      "PagedResultViewModel_BulkChargeUnscheduledSubscriptionViewModel": {
        "type": "object",
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkChargeUnscheduledSubscriptionViewModel"
            },
            "nullable": true
          },
          "more": {
            "type": "boolean",
            "description": "Indicates whether there are more subscriptions beyond the requested range."
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the operation has completed or is still processing subscriptions. Possible values are 'Done' and 'Processing'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResultViewModel_BulkChargeViewModel": {
        "type": "object",
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkChargeViewModel"
            },
            "nullable": true
          },
          "more": {
            "type": "boolean",
            "description": "Indicates whether there are more subscriptions beyond the requested range."
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the operation has completed or is still processing subscriptions. Possible values are 'Done' and 'Processing'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResultViewModel_BulkVerificationUnscheduledSubscriptionViewModel": {
        "type": "object",
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkVerificationUnscheduledSubscriptionViewModel"
            },
            "nullable": true
          },
          "more": {
            "type": "boolean",
            "description": "Indicates whether there are more subscriptions beyond the requested range."
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the operation has completed or is still processing subscriptions. Possible values are 'Done' and 'Processing'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResultViewModel_BulkVerificationViewModel": {
        "type": "object",
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkVerificationViewModel"
            },
            "nullable": true
          },
          "more": {
            "type": "boolean",
            "description": "Indicates whether there are more subscriptions beyond the requested range."
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the operation has completed or is still processing subscriptions. Possible values are 'Done' and 'Processing'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Payment": {
        "required": [
          "cardDetails",
          "paymentMethod",
          "paymentType"
        ],
        "type": "object",
        "properties": {
          "paymentType": {
            "type": "string",
            "description": "The type of payment. Possible values are: 'CARD', 'INVOICE', 'A2A', 'INSTALLMENT', 'WALLET', and 'PREPAID-INVOICE'.",
            "nullable": true
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method. For example Visa or Mastercard.",
            "nullable": true
          },
          "cardDetails": {
            "$ref": "#/components/schemas/SubscriptionCardDetails"
          }
        },
        "additionalProperties": false
      },
      "PaymentChargeInvoice": {
        "type": "object",
        "properties": {
          "invoiceNumber": {
            "type": "string",
            "description": "The invoice number.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentChargedViewModel": {
        "required": [
          "chargeId"
        ],
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "string",
            "nullable": true
          },
          "invoice": {
            "$ref": "#/components/schemas/PaymentChargeInvoice"
          }
        },
        "additionalProperties": false
      },
      "PaymentDetails": {
        "type": "object",
        "properties": {
          "paymentType": {
            "type": "string",
            "description": "The type of payment. Possible values are: 'CARD', 'INVOICE', 'A2A', 'INSTALLMENT', 'WALLET', and 'PREPAID-INVOICE'.",
            "nullable": true
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method, for example Visa or Mastercard.",
            "nullable": true
          },
          "invoiceDetails": {
            "$ref": "#/components/schemas/Invoice"
          },
          "cardDetails": {
            "$ref": "#/components/schemas/CardDetails"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodConfiguration": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the payment method or payment type to be configured, if the specified payment method is not configured correctly in the merchant configurations then this won't take effect.\r\nPayment type cannot be specified alongside payment methods that belong to it, if it happens the request will fail with an error.\r\nPossible payment methods values: \"Visa\", \"MasterCard\", \"Dankort\", \"AmericanExpress\", \"PayPal\", \"Vipps\", \"MobilePay\", \"Swish\", \"Arvato\", \"EasyInvoice\", \"EasyInstallment\", \"EasyCampaign\", \"RatePayInvoice\", \"RatePayInstallment\", \"RatePaySepa\", \"Sofort\", \"Trustly\".\r\nPossible payment types values: \"Card\", \"Invoice\", \"Installment\", \"A2A\", \"Wallet\".",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates that the specified payment method/type is allowed to be used for this payment, defaults to true.\r\nIf one or more payment method/type is configured in the parent array then this value will be considered false for any other payment method that the parent array doesn't cover.",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the payment method. \r\nPossible value currently is: 'easy-invoice'.",
            "nullable": true
          },
          "fee": {
            "$ref": "#/components/schemas/OrderItem"
          }
        },
        "additionalProperties": false,
        "description": "A specification of a payment method and a fee associated with payment. The `fee` attribute makes it possible to charge an invoice fee towards the customer."
      },
      "PaymentRefundResponse": {
        "required": [
          "refundId"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/ThePayment"
          }
        },
        "additionalProperties": false,
        "description": "The response returned from a successful call to the [Retrieve payment](#v1-payments-paymentid-get) method."
      },
      "PaymentSummary": {
        "type": "object",
        "properties": {
          "reservedAmount": {
            "type": "integer",
            "description": "The amount that has been reserved in the customer's bank account at the time of the purchase to make sure there are sufficient funds to charge the payment. See also the [Create payment](#v1-payments-post) method.",
            "format": "int32",
            "nullable": true
          },
          "chargedAmount": {
            "type": "integer",
            "description": "The charged amount. See also the [Charge payment](#v1-payments-paymentid-charges-post) method.",
            "format": "int32",
            "nullable": true
          },
          "refundedAmount": {
            "type": "integer",
            "description": "The amount that has been refunded. See also the [Refund payment](#v1-payments-paymentid-refunds-post) method.",
            "format": "int32",
            "nullable": true
          },
          "cancelledAmount": {
            "type": "integer",
            "description": "The amount that has been canceled. See also the [Cancel payment](#v1-payments-paymentid-cancels-post) method.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Summarizes the reserved, charged, refunded, and canceled amounts associated with a payment."
      },
      "Person": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name (also known as given name).",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name (also known as surname/family name).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The name of a natural person."
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "description": "The [country calling code](https://en.wikipedia.org/wiki/List_of_country_calling_codes), for example 001.",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The phone number (without the country code prefix).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An international phone number."
      },
      "PrivatePerson": {
        "type": "object",
        "properties": {
          "merchantReference": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date on which the customer was born.",
            "format": "date-time",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name (also known as given name).",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name (also known as surname/family name).",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email address.",
            "nullable": true
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        },
        "additionalProperties": false
      },
      "Refund": {
        "type": "object",
        "properties": {
          "refundId": {
            "type": "string",
            "description": "A unique identifier of this refund.",
            "format": "uuid"
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the refund.",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "description": "The current state of the refund. Possible values are: 'Pending', 'Cancelled', 'Failed',  'Completed', 'Expired'.",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date and time when the refund was last updated.",
            "format": "date-time"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "The list of returned and canceled order items that are associated with the refund. At least one order item is required.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains information about an active, canceled, or completed refund. Each refund is associated with a payment and one or multiple order items."
      },
      "RefundDetailsResponse": {
        "required": [
          "amount",
          "refundId"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "type": "string",
            "description": "The refund identifier (a UUID).",
            "format": "uuid"
          },
          "amount": {
            "type": "integer",
            "description": "The [amount](../api#currency-and-amount), for example 10000.",
            "format": "int32"
          },
          "invoiceDetails": {
            "$ref": "#/components/schemas/InvoiceDetails"
          }
        },
        "additionalProperties": false
      },
      "RefundPaymentBody": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The [amount](../api#currency-and-amount), for example 10000.",
            "format": "int32"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Shipping": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCountry"
            },
            "nullable": true
          },
          "merchantHandlesShippingCost": {
            "type": "boolean",
            "description": "If set to `true`, the payment order is required to be updated (using the [Update order](#v1-payments-paymentid-orderitems-put) method) with `shipping.costSpecified` set to `true` before the customer can complete a purchase. Defaults to `false` if not specified."
          },
          "enableBillingAddress": {
            "type": "boolean",
            "description": "If set to `true`, the customer is provided an option to specify separate addresses for billing and shipping on the checkout page. If set to `false`, the billing address is used as the shipping address."
          }
        },
        "additionalProperties": false
      },
      "ShippingCountry": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "A three-letter country code (ISO 3166-1), for example GBR. See also the [list of supported countries](../api#country-codes-and-phone-prefixes).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A country you provide shipping to."
      },
      "ShippingInformation": {
        "type": "object",
        "properties": {
          "trackingNumber": {
            "type": "string",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShippingUpdates": {
        "type": "object",
        "properties": {
          "costSpecified": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The subscription identifier (a UUID).",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The subscription identifier."
      },
      "SubscriptionCardDetails": {
        "required": [
          "expiryDate",
          "maskedPan"
        ],
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string",
            "description": "The four-digit expiration date of the payment card. The format should be: YYMM.",
            "nullable": true
          },
          "maskedPan": {
            "type": "string",
            "description": "A masked version of the PAN (Primary Account Number). At maximum, only the first six and last four digits of the account number are displayed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionDetails": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "The identifier of the subscription to be updated. If omitted, a new subscription will be created.",
            "format": "uuid",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The date and time when the subscription expires. It is not possible to charge this subscription after this date. The field has three components: date, time, and time zone (offset from GMT). For example: 2021-07-02T12:00:00.0000+02:00",
            "format": "date-time",
            "nullable": true
          },
          "interval": {
            "type": "integer",
            "description": "Defines the minimum number of days between each recurring charge. This interval commences from either the day the subscription was created or the most recent subscription charge, whichever is later. An interval value of 0 means that there are no payment interval restrictions.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the duration and interval when creating or updating a [subscription](#subscriptions)."
      },
      "SubscriptionImportError": {
        "type": "object",
        "properties": {
          "importStepsResponseCode": {
            "type": "string",
            "description": "The error code.",
            "nullable": true
          },
          "importStepsResponseSource": {
            "type": "string",
            "description": "The source of the error.",
            "nullable": true
          },
          "importStepsResponseText": {
            "type": "string",
            "description": "The error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an error that occurred during the import of a subscription from an external ecommerce system."
      },
      "SubscriptionViewModel": {
        "required": [
          "endDate",
          "interval",
          "paymentDetails",
          "subscriptionId"
        ],
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "The subscription identifier.",
            "format": "uuid"
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "interval": {
            "type": "integer",
            "description": "Defines the minimum number of days between each recurring charge. This interval commences from either the day the subscription was created or the most recent subscription charge, whichever is later. An interval value of 0 means that there are no payment interval restrictions.",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "description": "Refers to the date and time the subscription will expire. The field has three components: date, time, and time zone (offset from GMT), for example: 2021-07-02T12:00:00.0000+02:00.",
            "format": "date-time"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/Payment"
          },
          "importError": {
            "$ref": "#/components/schemas/SubscriptionImportError"
          }
        },
        "additionalProperties": false,
        "description": "The response object holding information about a subscription."
      },
      "TextOptions": {
        "type": "object",
        "properties": {
          "completePaymentButtonText": {
            "type": "string",
            "description": "Overrides payment button text. The following  predefined values are allowed: `pay`,  `purchase`, `order`, `book`, `reserve`, `signup`, `subscribe`, `accept`. The payment button text is localized.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Controls what text is displayed on the checkout page."
      },
      "ThePayment": {
        "required": [
          "checkout",
          "created",
          "orderDetails",
          "paymentId"
        ],
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "The payment identifier (a UUID).",
            "format": "uuid"
          },
          "summary": {
            "$ref": "#/components/schemas/PaymentSummary"
          },
          "consumer": {
            "$ref": "#/components/schemas/ConsumerDetails"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "orderDetails": {
            "$ref": "#/components/schemas/OrderDetails"
          },
          "checkout": {
            "$ref": "#/components/schemas/CheckoutParameters"
          },
          "created": {
            "type": "string",
            "description": "The date and time when the payment was initiated.",
            "format": "date-time"
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Refund"
            },
            "description": "An array of all the refunds associated with this payment.",
            "nullable": true
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Charge"
            },
            "nullable": true
          },
          "terminated": {
            "type": "string",
            "description": "The date and time of termination. Only present if the payment has been terminated.",
            "format": "date-time",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          },
          "unscheduledSubscription": {
            "$ref": "#/components/schemas/UnscheduledSubscription"
          },
          "myReference": {
            "type": "string",
            "description": "Merchant payment reference",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains all information about a payment."
      },
      "UnscheduledSubscription": {
        "type": "object",
        "properties": {
          "unscheduledSubscriptionId": {
            "type": "string",
            "description": "The unscheduled subscription identifier (a UUID).",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The unscheduled subscription identifier."
      },
      "UnscheduledSubscriptionCardDetails": {
        "required": [
          "expiryDate",
          "maskedPan"
        ],
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string",
            "description": "The four-digit expiration date of the payment card. The format should be: YYMM.",
            "nullable": true
          },
          "maskedPan": {
            "type": "string",
            "description": "A masked version of the PAN (Primary Account Number). At maximum, only the first six and last four digits of the account number are displayed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnscheduledSubscriptionDetails": {
        "type": "object",
        "properties": {
          "create": {
            "type": "boolean",
            "description": "A flag indicating if a new unscheduled card on file agreement should be created. Can be omitted when updating an existing unscheduled card on file agreement.",
            "nullable": true
          },
          "unscheduledSubscriptionId": {
            "type": "string",
            "description": "The identifier of the unscheduled card on file agreement to be updated. If omitted, a new unscheduled card on file agreement will be created.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the payment as one that should initiate or update an unscheduled card on file agreement"
      },
      "UnscheduledSubscriptionPayment": {
        "required": [
          "cardDetails",
          "paymentMethod",
          "paymentType"
        ],
        "type": "object",
        "properties": {
          "paymentType": {
            "type": "string",
            "description": "The type of payment. Possible values are: 'CARD', 'INVOICE', 'A2A', 'INSTALLMENT', 'WALLET', and 'PREPAID-INVOICE'.",
            "nullable": true
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method. For example Visa or Mastercard.",
            "nullable": true
          },
          "cardDetails": {
            "$ref": "#/components/schemas/UnscheduledSubscriptionCardDetails"
          }
        },
        "additionalProperties": false
      },
      "UnscheduledSubscriptionViewModel": {
        "required": [
          "paymentDetails",
          "unscheduledSubscriptionId"
        ],
        "type": "object",
        "properties": {
          "unscheduledSubscriptionId": {
            "type": "string",
            "description": "The unscheduled subscription identifier.",
            "format": "uuid"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/UnscheduledSubscriptionPayment"
          }
        },
        "additionalProperties": false
      },
      "UpdateCartBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The [amount](../api#currency-and-amount), for example 10000.",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "The array of order items.",
            "nullable": true
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingUpdates"
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdatePaymentMethodDetails"
            },
            "description": "Specifies an array of invoice fees added to the total price when invoice is used as the payment method.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The updated cart information."
      },
      "UpdateMyReferenceBody": {
        "type": "object",
        "properties": {
          "myReference": {
            "type": "string",
            "description": "Merchant payment reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePaymentMethodDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "fee": {
            "$ref": "#/components/schemas/OrderItem"
          }
        },
        "additionalProperties": false,
        "description": "Specifies the invoice fee added to the total amount when using invoice payments."
      },
      "UpdateReferenceInformationBody": {
        "required": [
          "checkoutUrl",
          "reference"
        ],
        "type": "object",
        "properties": {
          "checkoutUrl": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebHook": {
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string",
            "description": "The name of the event you want to subscribe to. See [webhooks](#webhooks) for the complete list of events.",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The callback is sent to this URL. Must be HTTPS to ensure a secure communication. Maximum allowed length of the URL is 256 characters.",
            "nullable": true
          },
          "authorization": {
            "type": "string",
            "description": "The credentials that will be sent in the HTTP Authorization request header of the callback. Must be between **8** and **32** characters long and contain **alphanumeric** characters.",
            "nullable": true
          },
          "headers": {
            "description": "A JArray of custom HTTP headers (name and value) to be sent with the HTTP callback request.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A webhook defines a HTTP callback that is triggered by a payment event."
      }
    },
    "securitySchemes": {
      "SecretApiKey": {
        "type": "apiKey",
        "description": "The secret API key.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "SecretApiKey": [ ]
    }
  ],
  "tags": [
    {
      "name": "Payments",
      "description": "The methods listed under this section handle a single payment object. [Create a new payment](#v1-payments-post) object whenever your customer places a new order. This will reserve the amount specified in the order. The payment object can be updated during the checkout using the methods: [Update reference information](#v1) and [Update order](#v1).<br /><br />When you ship the order, you should [charge the payment](#v1-payments). And if you need, the API also allows you to [cancel a payment](#v1) or [refund a customer](#v1-payments-refund-post)."
    },
    {
      "name": "Subscriptions",
      "description": "Subscriptions allow you to charge your customers on a regular basis, for example a monthly subscription for a product the customer must pay for every month.<br /><br />When a subscription is charged, a new payment object is created to represent the purchase of the subscription product.<br /><br />It is possible to verify and charge multiple subscriptions in bulk using the [Bulk charge subscriptions method](#v1-subscription-charges-post)."
    },
    {
      "name": "UnscheduledSubscriptions",
      "description": "Unscheduled subscriptions allow you to charge your customers at an unscheduled time interval with a variable amount, for example an automatic top-up agreement for a rail-card when the consumer drops below a certain stored value.<br /><br />When an unscheduled subscription is charged, a new payment object is created to represent the purchase of the unscheduled subscription product.<br /><br />It is possible to verify and charge multiple unscheduled subscriptions in bulk using the [Bulk charge unscheduled subscriptions method](#v1-unscheduled-subscription-charges-post)."
    },
    {
      "name": "Webhooks",
      "description": "Webhooks are **configured per payment** and can be specified in the request body of the following methods:<ul><li>[Create payment](#create-payment) using the [notifications](#v1-payments-post-body-notifications) property.</li><li>[Charge subscription](#charge-subscription) using the [notifications](#v1-subscriptions-subscriptionid-charges-post-body-notifications) property.</li></ul><br />For a complete reference of all available webhooks in Nets Easy, please see the [Webhooks reference page](/nets-easy/en-EU/api/webhooks). There is also a [guide dedicated to webhooks](/nets-easy/en-EU/docs/track-events-using-webhooks)."
    }
  ]
}